// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cred_system_back_end_app.Infrastructure.DB.ContextEntity;

#nullable disable

namespace cred_system_back_end_app.Migrations
{
    [DbContext(typeof(DbContextEntity))]
    [Migration("20230915143217_UpdateInsuranceCarrierList3")]
    partial class UpdateInsuranceCarrierList3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EducationInfoEntityProviderEntity", b =>
                {
                    b.Property<int>("EducationInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("EducationInfoId", "ProviderId");

                    b.HasIndex("ProviderId");

                    b.ToTable("EducationInfoEntityProviderEntity");
                });

            modelBuilder.Entity("HospitalEntityProviderEntity", b =>
                {
                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("HospitalId", "ProviderId");

                    b.HasIndex("ProviderId");

                    b.ToTable("HospitalEntityProviderEntity");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressStateId")
                        .HasColumnType("int");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressStateId");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressPlanAcceptListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressPlanAcceptList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressPrincipalTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressPrincipalType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressServiceHourEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HourFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HourTo")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationAddressId");

                    b.ToTable("AddressServiceHour");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressStateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressState");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AppNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppNotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppNotificationTypeId");

                    b.ToTable("AppNotification");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AppNotificationTypeListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppNotificationTypeName")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppNotificationTypeList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AttestationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttestationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttestationTypeId");

                    b.ToTable("Attestation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AttestationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttestationType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.BoardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EvidenceSubmitted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SBCertificateExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SBCertificateIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialtyBoard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Board");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CareTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CareType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CitizenshipTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CitizenshipTypeEntityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipTypeEntityId");

                    b.ToTable("CitizenshipType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorpTaxIdTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CorpTaxIdType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingNPI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorpTaxIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorpTaxIdTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CorporatePracticeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CorporationCertificateEvidence")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("EIN_W9Evidence")
                        .HasColumnType("bit");

                    b.Property<string>("EmployerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncorporationEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NPICertificateEvidence")
                        .HasColumnType("bit");

                    b.Property<string>("RenderingNPI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CorpTaxIdTypeId");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Corporation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationSpecialtyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CorporationEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialtyListEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorporationEntityId");

                    b.HasIndex("SpecialtyListEntityId");

                    b.ToTable("CorporationSpecialty");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationSubSpecialtyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CorporationEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialtyListEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorporationEntityId");

                    b.HasIndex("SpecialtyListEntityId");

                    b.ToTable("CorporationSubSpecialty");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateCompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DelegateCompany");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DelegateCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DelegateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DelegateCompanyId");

                    b.HasIndex("DelegateTypeId");

                    b.ToTable("Delegate");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DelegateType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentCommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentCommentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentLocationAzureBlobFilename")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DocumentLocationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCommentTypeId");

                    b.HasIndex("DocumentLocationAzureBlobFilename");

                    b.ToTable("DocumentComment");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentCommentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentCommentType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentLocationEntity", b =>
                {
                    b.Property<string>("AzureBlobFilename")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CertificateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("UploadBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadFilename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AzureBlobFilename");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DocumentLocation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentSectionTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentSectionType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentSectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentSectionTypeId");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EducationCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("EducationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProgramType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("EducationPeriodId")
                        .IsUnique();

                    b.HasIndex("EducationTypeId");

                    b.ToTable("EducationInfo");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.EducationTypesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EducationTypesEntity");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.EntityTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.HospPriviledgeListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HospPriviledgeList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospPriviledgeListId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalListId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalPriviledgePeriodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HospPriviledgeListId");

                    b.HasIndex("HospitalListId");

                    b.HasIndex("HospitalPriviledgePeriodId")
                        .IsUnique();

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HospitalList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.InsuranceTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InsuranceType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.InsurerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsurerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsurerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InsurerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderInsurerId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Insurer");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.JsonProviderFormEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("JsonBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JsonProviderForm");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.JsonProviderFormHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("JsonBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JsonProviderFormHistory");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MalpracticeCarrierListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MalpracticeCarrierList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MalpracticeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoverageAggregateLimit")
                        .HasColumnType("int");

                    b.Property<int>("CoverageAmountPerOcurrence")
                        .HasColumnType("int");

                    b.Property<bool>("CoverageEvidence")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasOIGCaseNumber")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsurancePolicyEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsurancePolicyExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MalpracticeCarrierId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OIGCaseNumber")
                        .HasColumnType("int");

                    b.Property<int>("PolicyNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MalpracticeCarrierId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Malpractice");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingNPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CareTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EINEvidence")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerId_EIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndorsementLetterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndorsementLetterEvidence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MedicaidId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalGroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NPICertificateEvidence")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CareTypeId");

                    b.HasIndex("MedicalGroupTypeId");

                    b.ToTable("MedicalGroup");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MedicalGroupType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalLicenseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasMedicalLicense")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicalLicenseEvidence")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MedicalLicenseExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicalLicenseNumber")
                        .HasColumnType("int");

                    b.Property<int>("MedicalLicenseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalLicenseTypeId");

                    b.HasIndex("ProviderId");

                    b.ToTable("MedicalLicense");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalLicenseTypeListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalLicenseTypeName")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalLicenseTypeList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalSchoolEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationInfoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MSCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MSSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSSpecialtyDegreeRecieved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationInfoId")
                        .IsUnique();

                    b.ToTable("MedicalSchool");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MultipleNPIEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NPI")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("MultipleNPI");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationAddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdaComplyComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AddressMedicaidID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressPrincipalTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcceptingNewPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdaptedToDiabledPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplyWithAda")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMovedMoreThan5Miles")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressPrincipalTypeId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("MedicalGroupId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("ProviderId");

                    b.ToTable("OrganizationAddress");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.PeriodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodMonthFrom")
                        .HasColumnType("int");

                    b.Property<int>("PeriodMonthTo")
                        .HasColumnType("int");

                    b.Property<int>("PeriodYearFrom")
                        .HasColumnType("int");

                    b.Property<int>("PeriodYearTo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.PlanAcceptListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanAcceptList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProfessionalLiabilityCarrierListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalCarrierList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProfessionalLiabilityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActionExplanationFormEvidence")
                        .HasColumnType("bit");

                    b.Property<int>("CoverageAggregateLimit")
                        .HasColumnType("int");

                    b.Property<int>("CoverageAmountPerOccurence")
                        .HasColumnType("int");

                    b.Property<bool>("CoverageEvidence")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsurancePolicyExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InurancePolicyEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolicyNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalLiabilityCarrierId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalLiabilityCarrierId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProfessionalLiability");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderCorporationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderCorporation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderDelegateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DelegateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderDelegate");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("CitizenshipNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CitizenshipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CurriculumVitaeEvidence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NPICertificateEvidence")
                        .HasColumnType("bit");

                    b.Property<string>("PRMedicalLicense")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("PenalRecordEvidence")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("UnderInvestigation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipTypeId");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("ProviderDetail");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEducationInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationInfoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationInfoId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderEducationInfo");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingNPI")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RenderingNPI")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("SameAsRenderingNPI")
                        .HasColumnType("bit");

                    b.Property<string>("SurName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderTypeId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderHospitalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderHospital");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderMedicalGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalGroupId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderMedicalGroup");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderPlanAcceptEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanAcceptListId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanAcceptListId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderPlanAccept");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderSpecialtyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidenceFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SpecialtyListId");

                    b.ToTable("ProviderSpecialty");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderSubSpecialtyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidenceFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("SubSpecialtyListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SubSpecialtyListId");

                    b.ToTable("ProviderSubSpecialty");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProviderType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.SignUpHistoryEntity", b =>
                {
                    b.Property<Guid>("IdB2C")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdB2C");

                    b.ToTable("SignUpHistory");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.SpecialtyListEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("SpecialtyList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.SubSpecialtyListEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("SubSpecialtyList");
                });

            modelBuilder.Entity("EducationInfoEntityProviderEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", null)
                        .WithMany()
                        .HasForeignKey("EducationInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", null)
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalEntityProviderEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalEntity", null)
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", null)
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.AddressStateEntity", "AddressState")
                        .WithMany("Address")
                        .HasForeignKey("AddressStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.AddressTypeEntity", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressState");

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressServiceHourEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationAddressEntity", "OrganizationAddress")
                        .WithMany("AddressServiceHour")
                        .HasForeignKey("OrganizationAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationAddress");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AppNotificationEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.AppNotificationTypeListEntity", "AppNotificationType")
                        .WithMany("AppNotifications")
                        .HasForeignKey("AppNotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppNotificationType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AttestationEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.AttestationTypeEntity", "AttestationType")
                        .WithMany("Attestation")
                        .HasForeignKey("AttestationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttestationType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.BoardEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("Board")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CitizenshipTypeEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CitizenshipTypeEntity", null)
                        .WithMany("CitizenshipType")
                        .HasForeignKey("CitizenshipTypeEntityId");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CorpTaxIdTypeEntity", "CorpTaxIdType")
                        .WithMany("Corporation")
                        .HasForeignKey("CorpTaxIdTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.EntityTypeEntity", "EntityType")
                        .WithMany("Corporation")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorpTaxIdType");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationSpecialtyEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationEntity", null)
                        .WithMany("CorporationSpecialty")
                        .HasForeignKey("CorporationEntityId");

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.SpecialtyListEntity", null)
                        .WithMany("CorporationSpecialty")
                        .HasForeignKey("SpecialtyListEntityId");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationSubSpecialtyEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationEntity", null)
                        .WithMany("CorporationSubSpecialty")
                        .HasForeignKey("CorporationEntityId");

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.SpecialtyListEntity", null)
                        .WithMany("CorporationSubSpecialty")
                        .HasForeignKey("SpecialtyListEntityId");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateCompanyEntity", "DelegateCompany")
                        .WithMany("Delegate")
                        .HasForeignKey("DelegateCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateTypeEntity", "DelegateType")
                        .WithMany("Delegate")
                        .HasForeignKey("DelegateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DelegateCompany");

                    b.Navigation("DelegateType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentCommentEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentCommentTypeEntity", "DocumentCommentType")
                        .WithMany("DocumentComments")
                        .HasForeignKey("DocumentCommentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentLocationEntity", "DocumentLocation")
                        .WithMany("DocumentComment")
                        .HasForeignKey("DocumentLocationAzureBlobFilename")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentCommentType");

                    b.Navigation("DocumentLocation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentLocationEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentTypeEntity", "DocumentType")
                        .WithMany("DocumentLocation")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentTypeEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentSectionTypeEntity", "DocumentSectionType")
                        .WithMany("DocumentType")
                        .HasForeignKey("DocumentSectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentSectionType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.AddressEntity", "Address")
                        .WithOne("EducationInfo")
                        .HasForeignKey("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.PeriodEntity", "EducationPeriod")
                        .WithOne("Education")
                        .HasForeignKey("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", "EducationPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.EducationTypesEntity", "EducationType")
                        .WithMany("EducationInfo")
                        .HasForeignKey("EducationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("EducationPeriod");

                    b.Navigation("EducationType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.HospPriviledgeListEntity", "HospPriviledgeList")
                        .WithMany("Hospital")
                        .HasForeignKey("HospPriviledgeListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalListEntity", "HospitalList")
                        .WithMany("Hospitals")
                        .HasForeignKey("HospitalListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.PeriodEntity", "Period")
                        .WithOne("Hospital")
                        .HasForeignKey("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalEntity", "HospitalPriviledgePeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospPriviledgeList");

                    b.Navigation("HospitalList");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MalpracticeEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.MalpracticeCarrierListEntity", "MalpracticeCarrier")
                        .WithMany("Malpractice")
                        .HasForeignKey("MalpracticeCarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("Malpractice")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MalpracticeCarrier");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CareTypeEntity", "CareType")
                        .WithMany("MedicalGroup")
                        .HasForeignKey("CareTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupTypeEntity", "MedicalGroupType")
                        .WithMany("MedicalGroup")
                        .HasForeignKey("MedicalGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareType");

                    b.Navigation("MedicalGroupType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalLicenseEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalLicenseTypeListEntity", "MedicalLicenseType")
                        .WithMany("MedicalLicenses")
                        .HasForeignKey("MedicalLicenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("MedicalLicenses")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalLicenseType");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalSchoolEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", "EducationInfo")
                        .WithOne("MedicalSchool")
                        .HasForeignKey("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalSchoolEntity", "EducationInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationInfo");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MultipleNPIEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("MultipleNPI")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationAddressEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.AddressEntity", "Address")
                        .WithMany("OrganizationAddress")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.AddressPrincipalTypeEntity", "AddressPrincipalType")
                        .WithMany("OrganizationAddress")
                        .HasForeignKey("AddressPrincipalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationEntity", "Corporation")
                        .WithMany("OrganizationAddressEntities")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupEntity", "MedicalGroup")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("MedicalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationTypeEntity", "OrganizationType")
                        .WithMany("OrganizationAddress")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressPrincipalType");

                    b.Navigation("Corporation");

                    b.Navigation("MedicalGroup");

                    b.Navigation("OrganizationType");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProfessionalLiabilityEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProfessionalLiabilityCarrierListEntity", "ProfessionalLiabilityCarrier")
                        .WithMany("ProfessionalLiability")
                        .HasForeignKey("ProfessionalLiabilityCarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("ProfessionalLiability")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalLiabilityCarrier");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderCorporationEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationEntity", "Corporation")
                        .WithMany("ProviderCorporations")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("ProviderCorporation")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderDelegateEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateEntity", "Delegate")
                        .WithMany("ProviderDelegate")
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("ProviderDelegate")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delegate");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderDetailEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.CitizenshipTypeEntity", "CitizenshipType")
                        .WithMany()
                        .HasForeignKey("CitizenshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithOne("ProviderDetail")
                        .HasForeignKey("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderDetailEntity", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitizenshipType");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEducationInfoEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", "EducationInfo")
                        .WithMany()
                        .HasForeignKey("EducationInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationInfo");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderTypeEntity", "ProviderType")
                        .WithMany("Provider")
                        .HasForeignKey("ProviderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderHospitalEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalEntity", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderMedicalGroupEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupEntity", "MedicalGroup")
                        .WithMany("ProviderMedicalGroup")
                        .HasForeignKey("MedicalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("ProviderMedicalGroup")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalGroup");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderPlanAcceptEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.PlanAcceptListEntity", "PlanAcceptList")
                        .WithMany("ProviderPlanAccept")
                        .HasForeignKey("PlanAcceptListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("ProviderPlanAccept")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanAcceptList");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderSpecialtyEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("ProviderSpecialty")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.SpecialtyListEntity", "SpecialtyList")
                        .WithMany()
                        .HasForeignKey("SpecialtyListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("SpecialtyList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderSubSpecialtyEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", "Provider")
                        .WithMany("ProviderSubSpecialty")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.SubSpecialtyListEntity", "SubSpecialtyList")
                        .WithMany()
                        .HasForeignKey("SubSpecialtyListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("SubSpecialtyList");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.SpecialtyListEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationTypeEntity", "OrganizationType")
                        .WithMany("Specialty")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.SubSpecialtyListEntity", b =>
                {
                    b.HasOne("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationTypeEntity", "OrganizationType")
                        .WithMany("SubSpecialty")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressEntity", b =>
                {
                    b.Navigation("EducationInfo");

                    b.Navigation("OrganizationAddress");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressPrincipalTypeEntity", b =>
                {
                    b.Navigation("OrganizationAddress");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressStateEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AddressTypeEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AppNotificationTypeListEntity", b =>
                {
                    b.Navigation("AppNotifications");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.AttestationTypeEntity", b =>
                {
                    b.Navigation("Attestation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CareTypeEntity", b =>
                {
                    b.Navigation("MedicalGroup");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CitizenshipTypeEntity", b =>
                {
                    b.Navigation("CitizenshipType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorpTaxIdTypeEntity", b =>
                {
                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.CorporationEntity", b =>
                {
                    b.Navigation("CorporationSpecialty");

                    b.Navigation("CorporationSubSpecialty");

                    b.Navigation("OrganizationAddressEntities");

                    b.Navigation("ProviderCorporations");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateCompanyEntity", b =>
                {
                    b.Navigation("Delegate");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateEntity", b =>
                {
                    b.Navigation("ProviderDelegate");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DelegateTypeEntity", b =>
                {
                    b.Navigation("Delegate");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentCommentTypeEntity", b =>
                {
                    b.Navigation("DocumentComments");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentLocationEntity", b =>
                {
                    b.Navigation("DocumentComment");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentSectionTypeEntity", b =>
                {
                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.DocumentTypeEntity", b =>
                {
                    b.Navigation("DocumentLocation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.EducationInfoEntity", b =>
                {
                    b.Navigation("MedicalSchool");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.EducationTypesEntity", b =>
                {
                    b.Navigation("EducationInfo");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.EntityTypeEntity", b =>
                {
                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.HospPriviledgeListEntity", b =>
                {
                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.HospitalListEntity", b =>
                {
                    b.Navigation("Hospitals");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MalpracticeCarrierListEntity", b =>
                {
                    b.Navigation("Malpractice");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupEntity", b =>
                {
                    b.Navigation("OrganizationAddresses");

                    b.Navigation("ProviderMedicalGroup");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalGroupTypeEntity", b =>
                {
                    b.Navigation("MedicalGroup");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.MedicalLicenseTypeListEntity", b =>
                {
                    b.Navigation("MedicalLicenses");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationAddressEntity", b =>
                {
                    b.Navigation("AddressServiceHour");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.OrganizationTypeEntity", b =>
                {
                    b.Navigation("OrganizationAddress");

                    b.Navigation("Specialty");

                    b.Navigation("SubSpecialty");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.PeriodEntity", b =>
                {
                    b.Navigation("Education")
                        .IsRequired();

                    b.Navigation("Hospital")
                        .IsRequired();
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.PlanAcceptListEntity", b =>
                {
                    b.Navigation("ProviderPlanAccept");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProfessionalLiabilityCarrierListEntity", b =>
                {
                    b.Navigation("ProfessionalLiability");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderEntity", b =>
                {
                    b.Navigation("Board");

                    b.Navigation("Malpractice");

                    b.Navigation("MedicalLicenses");

                    b.Navigation("MultipleNPI");

                    b.Navigation("ProfessionalLiability");

                    b.Navigation("ProviderCorporation");

                    b.Navigation("ProviderDelegate");

                    b.Navigation("ProviderDetail")
                        .IsRequired();

                    b.Navigation("ProviderMedicalGroup");

                    b.Navigation("ProviderPlanAccept");

                    b.Navigation("ProviderSpecialty");

                    b.Navigation("ProviderSubSpecialty");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.ProviderTypeEntity", b =>
                {
                    b.Navigation("Provider");
                });

            modelBuilder.Entity("cred_system_back_end_app.Infrastructure.DB.Entity.SpecialtyListEntity", b =>
                {
                    b.Navigation("CorporationSpecialty");

                    b.Navigation("CorporationSubSpecialty");
                });
#pragma warning restore 612, 618
        }
    }
}
